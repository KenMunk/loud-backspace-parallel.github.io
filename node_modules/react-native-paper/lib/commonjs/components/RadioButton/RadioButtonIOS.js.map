{"version":3,"names":["RadioButtonIOS","disabled","onPress","theme","status","value","testID","rest","context","checked","isChecked","contextValue","checkedColor","rippleColor","getSelectionControlIOSColor","customColor","color","undefined","handlePress","onValueChange","styles","container","opacity","displayName","StyleSheet","create","borderRadius","padding","withInternalTheme","RadioButtonIOSWithTheme"],"sources":["RadioButtonIOS.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { $RemoveChildren, InternalTheme } from '../../types';\nimport { getSelectionControlIOSColor } from '../Checkbox/utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonIOS = ({\n  disabled,\n  onPress,\n  theme,\n  status,\n  value,\n  testID,\n  ...rest\n}: Props) => {\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        const { checkedColor, rippleColor } = getSelectionControlIOSColor({\n          theme,\n          disabled,\n          customColor: rest.color,\n        });\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      value,\n                      onValueChange: context?.onValueChange,\n                    });\n                  }\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <View style={{ opacity: checked ? 1 : 0 }}>\n              <MaterialCommunityIcon\n                allowFontScaling={false}\n                name=\"check\"\n                size={24}\n                color={checkedColor}\n                direction=\"ltr\"\n              />\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withInternalTheme(RadioButtonIOS);\n\n// @component-docs ignore-next-line\nconst RadioButtonIOSWithTheme = withInternalTheme(RadioButtonIOS);\n// @component-docs ignore-next-line\nexport { RadioButtonIOSWithTheme as RadioButtonIOS };\n"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,cAAc,GAAG,QAQV;EAAA,IARW;IACtBC,QADsB;IAEtBC,OAFsB;IAGtBC,KAHsB;IAItBC,MAJsB;IAKtBC,KALsB;IAMtBC,MANsB;IAOtB,GAAGC;EAPmB,CAQX;EACX,oBACE,oBAAC,oCAAD,CAAoB,QAApB,QACIC,OAAD,IAAsC;IACrC,MAAMC,OAAO,GACX,IAAAC,iBAAA,EAAU;MACRC,YAAY,EAAEH,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEH,KADf;MAERD,MAFQ;MAGRC;IAHQ,CAAV,MAIO,SALT;IAOA,MAAM;MAAEO,YAAF;MAAgBC;IAAhB,IAAgC,IAAAC,kCAAA,EAA4B;MAChEX,KADgE;MAEhEF,QAFgE;MAGhEc,WAAW,EAAER,IAAI,CAACS;IAH8C,CAA5B,CAAtC;IAMA,oBACE,oBAAC,wBAAD,eACMT,IADN;MAEE,UAAU,MAFZ;MAGE,WAAW,EAAEM,WAHf;MAIE,OAAO,EACLZ,QAAQ,GACJgB,SADI,GAEJ,MAAM;QACJ,IAAAC,mBAAA,EAAY;UACVhB,OADU;UAEVG,KAFU;UAGVc,aAAa,EAAEX,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEW;QAHd,CAAZ;MAKD,CAbT;MAeE,iBAAiB,EAAC,OAfpB;MAgBE,kBAAkB,EAAE;QAAElB,QAAF;QAAYQ;MAAZ,CAhBtB;MAiBE,uBAAuB,EAAC,QAjB1B;MAkBE,KAAK,EAAEW,MAAM,CAACC,SAlBhB;MAmBE,MAAM,EAAEf;IAnBV,iBAqBE,oBAAC,iBAAD;MAAM,KAAK,EAAE;QAAEgB,OAAO,EAAEb,OAAO,GAAG,CAAH,GAAO;MAAzB;IAAb,gBACE,oBAAC,8BAAD;MACE,gBAAgB,EAAE,KADpB;MAEE,IAAI,EAAC,OAFP;MAGE,IAAI,EAAE,EAHR;MAIE,KAAK,EAAEG,YAJT;MAKE,SAAS,EAAC;IALZ,EADF,CArBF,CADF;EAiCD,CAhDH,CADF;AAoDD,CA7DD;;AA+DAZ,cAAc,CAACuB,WAAf,GAA6B,iBAA7B;;AAEA,MAAMH,MAAM,GAAGI,uBAAA,CAAWC,MAAX,CAAkB;EAC/BJ,SAAS,EAAE;IACTK,YAAY,EAAE,EADL;IAETC,OAAO,EAAE;EAFA;AADoB,CAAlB,CAAf;;eAOe,IAAAC,0BAAA,EAAkB5B,cAAlB,C,EAEf;;;;AACA,MAAM6B,uBAAuB,GAAG,IAAAD,0BAAA,EAAkB5B,cAAlB,CAAhC,C,CACA"}