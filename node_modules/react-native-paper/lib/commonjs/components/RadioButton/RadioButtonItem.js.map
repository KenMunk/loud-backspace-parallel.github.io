{"version":3,"names":["RadioButtonItem","value","label","style","labelStyle","onPress","disabled","color","uncheckedColor","status","theme","accessibilityLabel","testID","mode","position","labelVariant","radioButtonProps","isLeading","radioButton","textColor","isV3","colors","onSurface","text","disabledTextColor","onSurfaceDisabled","textAlign","computedStyle","context","checked","isChecked","contextValue","handlePress","onValueChange","styles","container","font","displayName","withInternalTheme","RadioButtonItemWithTheme","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","flexShrink","flexGrow","fontSize"],"sources":["RadioButtonItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { InternalTheme, MD3TypescaleKey } from '../../types';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport RadioButton from './RadioButton';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport RadioButtonIOS from './RadioButtonIOS';\nimport { handlePress, isChecked } from './utils';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Label text variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  labelVariant?: keyof typeof MD3TypescaleKey;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<RadioButton.Android />` or `<RadioButton.IOS />` should be used.\n   * Left undefined `<RadioButton />` will be used.\n   */\n  mode?: 'android' | 'ios';\n  /**\n   * Radio button control position.\n   */\n  position?: 'leading' | 'trailing';\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonItem = ({\n  value,\n  label,\n  style,\n  labelStyle,\n  onPress,\n  disabled,\n  color,\n  uncheckedColor,\n  status,\n  theme,\n  accessibilityLabel = label,\n  testID,\n  mode,\n  position = 'trailing',\n  labelVariant = 'bodyLarge',\n}: Props) => {\n  const radioButtonProps = { value, disabled, status, color, uncheckedColor };\n  const isLeading = position === 'leading';\n  let radioButton: any;\n\n  if (mode === 'android') {\n    radioButton = <RadioButtonAndroid {...radioButtonProps} />;\n  } else if (mode === 'ios') {\n    radioButton = <RadioButtonIOS {...radioButtonProps} />;\n  } else {\n    radioButton = <RadioButton {...radioButtonProps} />;\n  }\n\n  const textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  const disabledTextColor = theme.isV3\n    ? theme.colors.onSurfaceDisabled\n    : theme.colors.disabled;\n  const textAlign = isLeading ? 'right' : 'left';\n\n  const computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign,\n  } as TextStyle;\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n        return (\n          <TouchableRipple\n            onPress={() =>\n              handlePress({\n                onPress: onPress,\n                onValueChange: context?.onValueChange,\n                value,\n              })\n            }\n            accessibilityLabel={accessibilityLabel}\n            accessibilityRole=\"radio\"\n            accessibilityState={{\n              checked,\n              disabled,\n            }}\n            testID={testID}\n            disabled={disabled}\n          >\n            <View style={[styles.container, style]} pointerEvents=\"none\">\n              {isLeading && radioButton}\n              <Text\n                variant={labelVariant}\n                style={[\n                  styles.label,\n                  !theme.isV3 && styles.font,\n                  computedStyle,\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n              {!isLeading && radioButton}\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\n\nexport default withInternalTheme(RadioButtonItem);\n\n// @component-docs ignore-next-line\nconst RadioButtonItemWithTheme = withInternalTheme(RadioButtonItem);\n// @component-docs ignore-next-line\nexport { RadioButtonItemWithTheme as RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n  font: {\n    fontSize: 16,\n  },\n});\n"],"mappings":"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"}