{"version":3,"names":["Searchbar","React","forwardRef","ref","clearAccessibilityLabel","clearIcon","icon","iconColor","customIconColor","inputStyle","onIconPress","placeholder","searchAccessibilityLabel","elevation","style","theme","value","loading","testID","rest","root","useRef","useImperativeHandle","input","current","focus","clear","setNativeProps","args","isFocused","blur","noop","Error","handleClearPress","onChangeText","colors","roundness","dark","isV3","textColor","onSurface","text","color","alpha","rgb","string","rippleColor","borderRadius","styles","container","size","I18nManager","getConstants","isRTL","fonts","regular","Platform","select","web","outline","primary","loader","StyleSheet","create","flexDirection","alignItems","flex","fontSize","paddingLeft","alignSelf","textAlign","minWidth","margin","withInternalTheme"],"sources":["Searchbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  I18nManager,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextInput,\n  TextInputProps,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { withInternalTheme } from '../core/theming';\nimport type { InternalTheme } from '../types';\nimport ActivityIndicator from './ActivityIndicator';\nimport type { IconSource } from './Icon';\nimport IconButton from './IconButton/IconButton';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport Surface from './Surface';\n\nexport type Props = React.ComponentPropsWithRef<typeof TextInput> & {\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  clearAccessibilityLabel?: string;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  searchAccessibilityLabel?: string;\n  /**\n   * Hint text shown when the input is empty.\n   */\n  placeholder?: string;\n  /**\n   * The value of the text input.\n   */\n  value: string;\n  /**\n   * Icon name for the left icon button (see `onIconPress`).\n   */\n  icon?: IconSource;\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChangeText?: (query: string) => void;\n  /**\n   * Callback to execute if we want the left icon to act as button.\n   */\n  onIconPress?: () => void;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Changes Searchbar shadow and background on iOS and Android.\n   */\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | Animated.Value;\n  /**\n   * Set style of the TextInput component inside the searchbar\n   */\n  inputStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Custom color for icon, default will be derived from theme\n   */\n  iconColor?: string;\n  /**\n   * Custom icon for clear button, default will be icon close\n   */\n  clearIcon?: IconSource;\n  /**\n   * @supported Available in v5.x\n   * Custom flag for replacing clear button with activity indicator.\n   */\n  loading?: Boolean;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n};\n\ntype TextInputHandles = Pick<\n  TextInput,\n  'setNativeProps' | 'isFocused' | 'clear' | 'blur' | 'focus'\n>;\n\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [searchQuery, setSearchQuery] = React.useState('');\n *\n *   const onChangeSearch = query => setSearchQuery(query);\n *\n *   return (\n *     <Searchbar\n *       placeholder=\"Search\"\n *       onChangeText={onChangeSearch}\n *       value={searchQuery}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n\n * ```\n */\nconst Searchbar = React.forwardRef<TextInputHandles, Props>(\n  (\n    {\n      clearAccessibilityLabel = 'clear',\n      clearIcon,\n      icon,\n      iconColor: customIconColor,\n      inputStyle,\n      onIconPress,\n      placeholder,\n      searchAccessibilityLabel = 'search',\n      elevation = 1,\n      style,\n      theme,\n      value,\n      loading = false,\n      testID = 'search-bar',\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const root = React.useRef<TextInput>(null);\n\n    React.useImperativeHandle(ref, () => {\n      const input = root.current;\n\n      if (input) {\n        return {\n          focus: () => input.focus(),\n          clear: () => input.clear(),\n          setNativeProps: (args: TextInputProps) => input.setNativeProps(args),\n          isFocused: () => input.isFocused(),\n          blur: () => input.blur(),\n        };\n      }\n\n      const noop = () => {\n        throw new Error('TextInput is not available');\n      };\n\n      return {\n        focus: noop,\n        clear: noop,\n        setNativeProps: noop,\n        isFocused: noop,\n        blur: noop,\n      };\n    });\n\n    const handleClearPress = () => {\n      root.current?.clear();\n      rest.onChangeText?.('');\n    };\n\n    const { colors, roundness, dark, isV3 } = theme;\n    const textColor = isV3 ? theme.colors.onSurface : theme.colors.text;\n    const iconColor =\n      customIconColor ||\n      (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n    const rippleColor = color(textColor).alpha(0.32).rgb().string();\n\n    return (\n      <Surface\n        style={[\n          { borderRadius: roundness },\n          !isV3 && styles.elevation,\n          styles.container,\n          style,\n        ]}\n        {...(theme.isV3 && { elevation })}\n      >\n        <IconButton\n          accessibilityRole=\"button\"\n          borderless\n          rippleColor={rippleColor}\n          onPress={onIconPress}\n          iconColor={iconColor}\n          icon={\n            icon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"magnify\"\n                color={color}\n                size={size}\n                direction={I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityLabel={searchAccessibilityLabel}\n        />\n        <TextInput\n          style={[\n            styles.input,\n            {\n              color: textColor,\n              ...(!isV3 && theme.fonts.regular),\n              ...Platform.select({ web: { outline: 'none' } }),\n            },\n            inputStyle,\n          ]}\n          placeholder={placeholder || ''}\n          placeholderTextColor={\n            theme.isV3 ? theme.colors.onSurface : theme.colors?.placeholder\n          }\n          selectionColor={colors?.primary}\n          underlineColorAndroid=\"transparent\"\n          returnKeyType=\"search\"\n          keyboardAppearance={dark ? 'dark' : 'light'}\n          accessibilityRole=\"search\"\n          ref={root}\n          value={value}\n          testID={testID}\n          {...rest}\n        />\n        {loading ? (\n          <ActivityIndicator\n            testID=\"activity-indicator\"\n            style={styles.loader}\n          />\n        ) : (\n          // Clear icon should be always rendered within Searchbar â€“ it's transparent,\n          // without touch events, when there is no value. It's done to avoid issues\n          // with the abruptly stopping ripple effect and changing bar width on web,\n          // when clearing the value.\n          <View\n            pointerEvents={value ? 'auto' : 'none'}\n            testID={`${testID}-icon-wrapper`}\n          >\n            <IconButton\n              borderless\n              accessibilityLabel={clearAccessibilityLabel}\n              iconColor={value ? iconColor : 'rgba(255, 255, 255, 0)'}\n              rippleColor={rippleColor}\n              onPress={handleClearPress}\n              icon={\n                clearIcon ||\n                (({ size, color }) => (\n                  <MaterialCommunityIcon\n                    name=\"close\"\n                    color={color}\n                    size={size}\n                    direction={I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'}\n                  />\n                ))\n              }\n              accessibilityRole=\"button\"\n            />\n          </View>\n        )}\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.getConstants().isRTL ? 'right' : 'left',\n    minWidth: 0,\n  },\n  elevation: {\n    elevation: 4,\n  },\n  loader: {\n    margin: 10,\n  },\n});\n\nexport default withInternalTheme(Searchbar);\n"],"mappings":"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"}