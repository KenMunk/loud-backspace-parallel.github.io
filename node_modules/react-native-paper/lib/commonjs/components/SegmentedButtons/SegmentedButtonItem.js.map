{"version":3,"names":["SegmentedButtonItem","checked","accessibilityLabel","disabled","style","showSelectedCheck","icon","testID","label","onPress","segment","density","theme","useInternalTheme","checkScale","React","useRef","Animated","Value","current","useEffect","spring","toValue","useNativeDriver","start","roundness","isV3","borderColor","textColor","borderWidth","backgroundColor","getSegmentedButtonColors","borderRadius","segmentBorderRadius","getSegmentedButtonBorderRadius","rippleColor","color","alpha","rgb","string","iconSize","iconStyle","marginRight","transform","scale","interpolate","inputRange","outputRange","buttonStyle","paddingVertical","getSegmentedButtonDensityPadding","rippleStyle","showIcon","labelTextStyle","textTransform","fontWeight","fonts","labelLarge","styles","button","content","undefined","StyleSheet","create","minWidth","borderStyle","textAlign","flexDirection","alignItems","justifyContent","paddingHorizontal","SegmentedButtonWithTheme"],"sources":["SegmentedButtonItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { useInternalTheme } from '../../core/theming';\nimport type { IconSource } from '../Icon';\nimport Icon from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport {\n  getSegmentedButtonBorderRadius,\n  getSegmentedButtonColors,\n  getSegmentedButtonDensityPadding,\n} from './utils';\n\nexport type Props = {\n  /**\n   * Whether the segmented button is checked\n   */\n  checked: boolean;\n  /**\n   * Icon to display for the `SegmentedButtonItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `SegmentedButtonItem`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n  /**\n   * Value of button.\n   */\n  value: string;\n  /**\n   * Label text of the button.\n   */\n  label?: string;\n  /**\n   * Button segment.\n   */\n  segment?: 'first' | 'last';\n  /**\n   * Show optional check icon to indicate selected state\n   */\n  showSelectedCheck?: boolean;\n  /**\n   * Density is applied to the height, to allow usage in denser UIs.\n   */\n  density?: 'regular' | 'small' | 'medium' | 'high';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\nconst SegmentedButtonItem = ({\n  checked,\n  accessibilityLabel,\n  disabled,\n  style,\n  showSelectedCheck,\n  icon,\n  testID,\n  label,\n  onPress,\n  segment,\n  density = 'regular',\n}: Props) => {\n  const theme = useInternalTheme();\n\n  const checkScale = React.useRef(new Animated.Value(0)).current;\n\n  React.useEffect(() => {\n    if (!showSelectedCheck) {\n      return;\n    }\n    if (checked) {\n      Animated.spring(checkScale, {\n        toValue: 1,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.spring(checkScale, {\n        toValue: 0,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [checked, checkScale, showSelectedCheck]);\n\n  const { roundness, isV3 } = theme;\n  const { borderColor, textColor, borderWidth, backgroundColor } =\n    getSegmentedButtonColors({\n      checked,\n      theme,\n      disabled,\n    });\n\n  const borderRadius = (isV3 ? 5 : 1) * roundness;\n  const segmentBorderRadius = getSegmentedButtonBorderRadius({\n    theme,\n    segment,\n  });\n  const rippleColor = color(textColor).alpha(0.12).rgb().string();\n\n  const iconSize = isV3 ? 18 : 16;\n  const iconStyle = {\n    marginRight: label ? 5 : checked && showSelectedCheck ? 3 : 0,\n    ...(label && {\n      transform: [\n        {\n          scale: checkScale.interpolate({\n            inputRange: [0, 1],\n            outputRange: [1, 0],\n          }),\n        },\n      ],\n    }),\n  };\n\n  const buttonStyle: ViewStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius,\n    ...segmentBorderRadius,\n  };\n  const paddingVertical = getSegmentedButtonDensityPadding({ density });\n  const rippleStyle: ViewStyle = {\n    borderRadius,\n    ...segmentBorderRadius,\n  };\n  const showIcon = icon && !label ? true : checked ? !showSelectedCheck : true;\n  const labelTextStyle: TextStyle = {\n    ...(!isV3\n      ? {\n          textTransform: 'uppercase',\n          fontWeight: '500',\n        }\n      : theme.fonts.labelLarge),\n    color: textColor,\n  };\n\n  return (\n    <View style={[buttonStyle, styles.button, style]}>\n      <TouchableRipple\n        borderless\n        onPress={onPress}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityState={{ disabled, checked }}\n        accessibilityRole=\"button\"\n        disabled={disabled}\n        rippleColor={rippleColor}\n        testID={testID}\n        style={rippleStyle}\n      >\n        <View style={[styles.content, { paddingVertical }]}>\n          {checked && showSelectedCheck ? (\n            <Animated.View\n              testID={`${testID}-check-icon`}\n              style={[iconStyle, { transform: [{ scale: checkScale }] }]}\n            >\n              <Icon source={'check'} size={iconSize} />\n            </Animated.View>\n          ) : null}\n          {showIcon ? (\n            <Animated.View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={iconSize}\n                color={disabled ? textColor : undefined}\n              />\n            </Animated.View>\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            style={[styles.label, labelTextStyle]}\n            selectable={false}\n            numberOfLines={1}\n          >\n            {label}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 76,\n    borderStyle: 'solid',\n  },\n  label: {\n    textAlign: 'center',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 9,\n    paddingHorizontal: 16,\n  },\n});\n\nexport default SegmentedButtonItem;\n\nconst SegmentedButtonWithTheme = SegmentedButtonItem;\nexport { SegmentedButtonWithTheme as SegmentedButton };\n"],"mappings":"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"}