{"version":3,"names":["SegmentedButtons","value","onValueChange","buttons","multiSelect","density","style","theme","useTheme","styles","row","map","item","i","disabledChildStyle","getDisabledSegmentedButtonStyle","index","segment","length","undefined","checked","Array","isArray","includes","onPress","e","nextValue","filter","val","StyleSheet","create","flexDirection"],"sources":["SegmentedButtons.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { useTheme } from '../../core/theming';\nimport type { IconSource } from '../Icon';\nimport SegmentedButtonItem from './SegmentedButtonItem';\nimport { getDisabledSegmentedButtonStyle } from './utils';\n\ntype ConditionalValue =\n  | {\n      /**\n       * Array of the currently selected segmented button values.\n       */\n      value: string[];\n      /**\n       * Support multiple selected options.\n       */\n      multiSelect: true;\n      /**\n       * Function to execute on selection change\n       */\n      onValueChange: (value: string[]) => void;\n    }\n  | {\n      /**\n       * Value of the currently selected segmented button.\n       */\n      value: string;\n      /**\n       * Support multiple selected options.\n       */\n      multiSelect?: false;\n      /**\n       * Function to execute on selection change\n       */\n      onValueChange: (value: string) => void;\n    };\n\nexport type Props = {\n  /**\n   * Buttons to display as options in toggle button.\n   * Button should contain the following properties:\n   * - `value`: value of button (required)\n   * - `icon`: icon to display for the item\n   * - `disabled`: whether the button is disabled\n   * - `accessibilityLabel`: acccessibility label for the button. This is read by the screen reader when the user taps the button.\n   * - `onPress`: callback that is called when button is pressed\n   * - `label`: label text of the button\n   * - `showSelectedCheck`: show optional check icon to indicate selected state\n   * - `style`: pass additional styles for the button\n   * - `testID`: testID to be used on tests\n   */\n  buttons: {\n    value: string;\n    icon?: IconSource;\n    disabled?: boolean;\n    accessibilityLabel?: string;\n    onPress?: (event: GestureResponderEvent) => void;\n    label?: string;\n    showSelectedCheck?: boolean;\n    style?: StyleProp<ViewStyle>;\n    testID?: string;\n  }[];\n  /**\n   * Density is applied to the height, to allow usage in denser UIs\n   */\n  density?: 'regular' | 'small' | 'medium' | 'high';\n  style?: StyleProp<ViewStyle>;\n} & ConditionalValue;\n\n/**\n * @supported Available in v5.x\n * Segmented buttons can be used to select options, switch views or sort elements.</br>\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/segmented-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { SegmentedButtons } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('');\n *\n *   return (\n *     <SegmentedButtons\n *      value={value}\n *      onValueChange={setValue}\n *      buttons={[\n *        {\n *          value: 'walk',\n *          label: 'Walking',\n *        },\n *        {\n *          value: 'train',\n *          label: 'Transit',\n *        },\n *      ]}\n *      style={styles.group}\n *    />\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst SegmentedButtons = ({\n  value,\n  onValueChange,\n  buttons,\n  multiSelect,\n  density,\n  style,\n}: Props) => {\n  const theme = useTheme();\n  return (\n    <View style={[styles.row, style]}>\n      {buttons.map((item, i) => {\n        const disabledChildStyle = getDisabledSegmentedButtonStyle({\n          theme,\n          buttons,\n          index: i,\n        });\n        const segment =\n          i === 0 ? 'first' : i === buttons.length - 1 ? 'last' : undefined;\n\n        const checked =\n          multiSelect && Array.isArray(value)\n            ? value.includes(item.value)\n            : value === item.value;\n\n        const onPress = (e: GestureResponderEvent) => {\n          item.onPress?.(e);\n\n          const nextValue =\n            multiSelect && Array.isArray(value)\n              ? checked\n                ? value.filter((val) => item.value !== val)\n                : [...value, item.value]\n              : item.value;\n\n          // @ts-expect-error: TS doesn't preserve types after destructuring, so the type isn't inferred correctly\n          onValueChange(nextValue);\n        };\n\n        return (\n          <SegmentedButtonItem\n            {...item}\n            key={i}\n            checked={checked}\n            segment={segment}\n            density={density}\n            onPress={onPress}\n            style={[item.style, disabledChildStyle]}\n          />\n        );\n      })}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n});\n\nexport default SegmentedButtons;\n\n// @component-docs ignore-next-line\nexport { SegmentedButtons as SegmentedButtons };\n"],"mappings":";;;;;;;AAAA;;AACA;;AAQA;;AAEA;;AACA;;;;;;;;;;AAgEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,gBAAgB,GAAG,QAOZ;EAAA,IAPa;IACxBC,KADwB;IAExBC,aAFwB;IAGxBC,OAHwB;IAIxBC,WAJwB;IAKxBC,OALwB;IAMxBC;EANwB,CAOb;EACX,MAAMC,KAAK,GAAG,IAAAC,iBAAA,GAAd;EACA,oBACE,oBAAC,iBAAD;IAAM,KAAK,EAAE,CAACC,MAAM,CAACC,GAAR,EAAaJ,KAAb;EAAb,GACGH,OAAO,CAACQ,GAAR,CAAY,CAACC,IAAD,EAAOC,CAAP,KAAa;IACxB,MAAMC,kBAAkB,GAAG,IAAAC,sCAAA,EAAgC;MACzDR,KADyD;MAEzDJ,OAFyD;MAGzDa,KAAK,EAAEH;IAHkD,CAAhC,CAA3B;IAKA,MAAMI,OAAO,GACXJ,CAAC,KAAK,CAAN,GAAU,OAAV,GAAoBA,CAAC,KAAKV,OAAO,CAACe,MAAR,GAAiB,CAAvB,GAA2B,MAA3B,GAAoCC,SAD1D;IAGA,MAAMC,OAAO,GACXhB,WAAW,IAAIiB,KAAK,CAACC,OAAN,CAAcrB,KAAd,CAAf,GACIA,KAAK,CAACsB,QAAN,CAAeX,IAAI,CAACX,KAApB,CADJ,GAEIA,KAAK,KAAKW,IAAI,CAACX,KAHrB;;IAKA,MAAMuB,OAAO,GAAIC,CAAD,IAA8B;MAAA;;MAC5C,iBAAAb,IAAI,CAACY,OAAL,qEAAAZ,IAAI,EAAWa,CAAX,CAAJ;MAEA,MAAMC,SAAS,GACbtB,WAAW,IAAIiB,KAAK,CAACC,OAAN,CAAcrB,KAAd,CAAf,GACImB,OAAO,GACLnB,KAAK,CAAC0B,MAAN,CAAcC,GAAD,IAAShB,IAAI,CAACX,KAAL,KAAe2B,GAArC,CADK,GAEL,CAAC,GAAG3B,KAAJ,EAAWW,IAAI,CAACX,KAAhB,CAHN,GAIIW,IAAI,CAACX,KALX,CAH4C,CAU5C;;MACAC,aAAa,CAACwB,SAAD,CAAb;IACD,CAZD;;IAcA,oBACE,oBAAC,4BAAD,eACMd,IADN;MAEE,GAAG,EAAEC,CAFP;MAGE,OAAO,EAAEO,OAHX;MAIE,OAAO,EAAEH,OAJX;MAKE,OAAO,EAAEZ,OALX;MAME,OAAO,EAAEmB,OANX;MAOE,KAAK,EAAE,CAACZ,IAAI,CAACN,KAAN,EAAaQ,kBAAb;IAPT,GADF;EAWD,CAvCA,CADH,CADF;AA4CD,CArDD;;;;AAuDA,MAAML,MAAM,GAAGoB,uBAAA,CAAWC,MAAX,CAAkB;EAC/BpB,GAAG,EAAE;IACHqB,aAAa,EAAE;EADZ;AAD0B,CAAlB,CAAf;;eAMe/B,gB,EAEf"}