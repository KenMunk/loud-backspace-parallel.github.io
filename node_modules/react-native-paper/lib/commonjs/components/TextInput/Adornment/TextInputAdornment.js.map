{"version":3,"names":["getAdornmentConfig","left","right","adornmentConfig","side","AdornmentSide","Left","adornment","Right","forEach","React","isValidElement","type","TextInputAffix","AdornmentType","Affix","TextInputIcon","Icon","push","getAdornmentStyleAdjustmentForNativeInput","leftAffixWidth","rightAffixWidth","paddingHorizontal","inputOffset","mode","isV3","OUTLINED_INPUT_OFFSET","ADORNMENT_OFFSET","getConstants","length","adornmentStyleAdjustmentForNativeInput","map","isLeftSide","inputModeAdornemntOffset","InputMode","Outlined","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","text","charAt","toUpperCase","slice","TextInputAdornment","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","maxFontSizeMultiplier","inputAdornmentComponent","commonProps","testID"],"sources":["TextInputAdornment.tsx"],"sourcesContent":["import React from 'react';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n} from 'react-native';\n\nimport { getConstants } from '../helpers';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n  isV3,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: number | string;\n  isV3?: boolean;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  const { OUTLINED_INPUT_OFFSET, ADORNMENT_OFFSET } = getConstants(isV3);\n\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged =\n      adornmentStyleAdjustmentForNativeInput.reduce(\n        (mergedStyles, currentStyle) => {\n          return {\n            ...mergedStyles,\n            ...currentStyle,\n          };\n        },\n        {}\n      );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                key={side}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                key={side}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n                maxFontSizeMultiplier={maxFontSizeMultiplier}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"],"mappings":"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"}