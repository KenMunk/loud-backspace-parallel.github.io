{"version":3,"names":["SKIP","Symbol","module","exports","rewire","babel","options","t","types","name","index","mappings","require","visitor","ImportDeclaration","path","node","source","value","replaceWithMultiple","specifiers","reduce","declarations","specifier","mapping","imported","alias","identifier","local","s","importDefaultSpecifier","importNamespaceSpecifier","importSpecifier","push","importDeclaration","stringLiteral","previous","find","d","requeue"],"sources":["index.js"],"sourcesContent":["const SKIP = Symbol('SKIP');\n\nmodule.exports = function rewire(babel, options) {\n  const t = babel.types;\n\n  const { name, index, mappings } = require(options.mappings ||\n    '../../mappings.json');\n\n  return {\n    visitor: {\n      ImportDeclaration(path) {\n        if (path.node.source.value !== name || path.node[SKIP]) {\n          return;\n        }\n\n        path.node.source.value = `${name}/${index}`;\n        path.replaceWithMultiple(\n          path.node.specifiers.reduce((declarations, specifier) => {\n            const mapping = mappings[specifier.imported.name];\n\n            if (mapping) {\n              const alias = `${name}/${mapping.path}`;\n              const identifier = t.identifier(specifier.local.name);\n\n              let s;\n\n              switch (mapping.name) {\n                case 'default':\n                  s = t.importDefaultSpecifier(identifier);\n                  break;\n                case '*':\n                  s = t.importNamespaceSpecifier(identifier);\n                  break;\n                default:\n                  s = t.importSpecifier(identifier, t.identifier(mapping.name));\n              }\n\n              declarations.push(\n                t.importDeclaration([s], t.stringLiteral(alias))\n              );\n            } else {\n              const previous = declarations.find(\n                (d) => d.source.value === path.node.source.value\n              );\n\n              if (previous) {\n                previous.specifiers.push(specifier);\n              } else {\n                const node = t.importDeclaration([specifier], path.node.source);\n                node[SKIP] = true;\n                declarations.push(node);\n              }\n            }\n\n            return declarations;\n          }, [])\n        );\n\n        path.requeue();\n      },\n    },\n  };\n};\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,MAAM,CAAC,MAAD,CAAnB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,OAAvB,EAAgC;EAC/C,MAAMC,CAAC,GAAGF,KAAK,CAACG,KAAhB;;EAEA,MAAM;IAAEC,IAAF;IAAQC,KAAR;IAAeC;EAAf,IAA4BC,OAAO,CAACN,OAAO,CAACK,QAAR,IACxC,qBADuC,CAAzC;;EAGA,OAAO;IACLE,OAAO,EAAE;MACPC,iBAAiB,CAACC,IAAD,EAAO;QACtB,IAAIA,IAAI,CAACC,IAAL,CAAUC,MAAV,CAAiBC,KAAjB,KAA2BT,IAA3B,IAAmCM,IAAI,CAACC,IAAL,CAAUhB,IAAV,CAAvC,EAAwD;UACtD;QACD;;QAEDe,IAAI,CAACC,IAAL,CAAUC,MAAV,CAAiBC,KAAjB,GAA0B,GAAET,IAAK,IAAGC,KAAM,EAA1C;QACAK,IAAI,CAACI,mBAAL,CACEJ,IAAI,CAACC,IAAL,CAAUI,UAAV,CAAqBC,MAArB,CAA4B,CAACC,YAAD,EAAeC,SAAf,KAA6B;UACvD,MAAMC,OAAO,GAAGb,QAAQ,CAACY,SAAS,CAACE,QAAV,CAAmBhB,IAApB,CAAxB;;UAEA,IAAIe,OAAJ,EAAa;YACX,MAAME,KAAK,GAAI,GAAEjB,IAAK,IAAGe,OAAO,CAACT,IAAK,EAAtC;YACA,MAAMY,UAAU,GAAGpB,CAAC,CAACoB,UAAF,CAAaJ,SAAS,CAACK,KAAV,CAAgBnB,IAA7B,CAAnB;YAEA,IAAIoB,CAAJ;;YAEA,QAAQL,OAAO,CAACf,IAAhB;cACE,KAAK,SAAL;gBACEoB,CAAC,GAAGtB,CAAC,CAACuB,sBAAF,CAAyBH,UAAzB,CAAJ;gBACA;;cACF,KAAK,GAAL;gBACEE,CAAC,GAAGtB,CAAC,CAACwB,wBAAF,CAA2BJ,UAA3B,CAAJ;gBACA;;cACF;gBACEE,CAAC,GAAGtB,CAAC,CAACyB,eAAF,CAAkBL,UAAlB,EAA8BpB,CAAC,CAACoB,UAAF,CAAaH,OAAO,CAACf,IAArB,CAA9B,CAAJ;YARJ;;YAWAa,YAAY,CAACW,IAAb,CACE1B,CAAC,CAAC2B,iBAAF,CAAoB,CAACL,CAAD,CAApB,EAAyBtB,CAAC,CAAC4B,aAAF,CAAgBT,KAAhB,CAAzB,CADF;UAGD,CApBD,MAoBO;YACL,MAAMU,QAAQ,GAAGd,YAAY,CAACe,IAAb,CACdC,CAAD,IAAOA,CAAC,CAACrB,MAAF,CAASC,KAAT,KAAmBH,IAAI,CAACC,IAAL,CAAUC,MAAV,CAAiBC,KAD5B,CAAjB;;YAIA,IAAIkB,QAAJ,EAAc;cACZA,QAAQ,CAAChB,UAAT,CAAoBa,IAApB,CAAyBV,SAAzB;YACD,CAFD,MAEO;cACL,MAAMP,IAAI,GAAGT,CAAC,CAAC2B,iBAAF,CAAoB,CAACX,SAAD,CAApB,EAAiCR,IAAI,CAACC,IAAL,CAAUC,MAA3C,CAAb;cACAD,IAAI,CAAChB,IAAD,CAAJ,GAAa,IAAb;cACAsB,YAAY,CAACW,IAAb,CAAkBjB,IAAlB;YACD;UACF;;UAED,OAAOM,YAAP;QACD,CAtCD,EAsCG,EAtCH,CADF;QA0CAP,IAAI,CAACwB,OAAL;MACD;;IAlDM;EADJ,CAAP;AAsDD,CA5DD"}