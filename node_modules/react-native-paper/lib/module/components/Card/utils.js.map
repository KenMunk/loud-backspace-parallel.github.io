{"version":3,"names":["color","black","white","getCardCoverStyle","theme","index","total","isV3","roundness","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","undefined","getBorderColor","colors","outline","dark","alpha","rgb","string","getBackgroundColor","isMode","surfaceVariant","surface","getCardColors","mode","modeToCompare","backgroundColor","borderColor"],"sources":["utils.tsx"],"sourcesContent":["import color from 'color';\n\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\n\ntype CardMode = 'elevated' | 'outlined' | 'contained';\n\nexport const getCardCoverStyle = ({\n  theme,\n  index,\n  total,\n}: {\n  theme: InternalTheme;\n  index?: number;\n  total?: number;\n}) => {\n  const { isV3, roundness } = theme;\n\n  if (index === 0) {\n    if (total === 1) {\n      return {\n        borderRadius: roundness,\n      };\n    }\n\n    if (isV3) {\n      return {\n        borderRadius: roundness,\n      };\n    }\n\n    return {\n      borderTopLeftRadius: roundness,\n      borderTopRightRadius: roundness,\n    };\n  }\n\n  if (typeof total === 'number' && index === total - 1) {\n    return {\n      borderBottomLeftRadius: roundness,\n    };\n  }\n\n  return undefined;\n};\n\nconst getBorderColor = ({ theme }: { theme: InternalTheme }) => {\n  if (theme.isV3) {\n    return theme.colors.outline;\n  }\n\n  if (theme.dark) {\n    return color(white).alpha(0.12).rgb().string();\n  }\n  return color(black).alpha(0.12).rgb().string();\n};\n\nconst getBackgroundColor = ({\n  theme,\n  isMode,\n}: {\n  theme: InternalTheme;\n  isMode: (mode: CardMode) => boolean;\n}) => {\n  if (theme.isV3) {\n    if (isMode('contained')) {\n      return theme.colors.surfaceVariant;\n    }\n    return theme.colors.surface;\n  }\n  return undefined;\n};\n\nexport const getCardColors = ({\n  theme,\n  mode,\n}: {\n  theme: InternalTheme;\n  mode: CardMode;\n}) => {\n  const isMode = (modeToCompare: CardMode) => {\n    return mode === modeToCompare;\n  };\n\n  return {\n    backgroundColor: getBackgroundColor({\n      theme,\n      isMode,\n    }),\n    borderColor: getBorderColor({ theme }),\n  };\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,+BAA7B;AAKA,OAAO,MAAMC,iBAAiB,GAAG,QAQ3B;EAAA,IAR4B;IAChCC,KADgC;IAEhCC,KAFgC;IAGhCC;EAHgC,CAQ5B;EACJ,MAAM;IAAEC,IAAF;IAAQC;EAAR,IAAsBJ,KAA5B;;EAEA,IAAIC,KAAK,KAAK,CAAd,EAAiB;IACf,IAAIC,KAAK,KAAK,CAAd,EAAiB;MACf,OAAO;QACLG,YAAY,EAAED;MADT,CAAP;IAGD;;IAED,IAAID,IAAJ,EAAU;MACR,OAAO;QACLE,YAAY,EAAED;MADT,CAAP;IAGD;;IAED,OAAO;MACLE,mBAAmB,EAAEF,SADhB;MAELG,oBAAoB,EAAEH;IAFjB,CAAP;EAID;;EAED,IAAI,OAAOF,KAAP,KAAiB,QAAjB,IAA6BD,KAAK,KAAKC,KAAK,GAAG,CAAnD,EAAsD;IACpD,OAAO;MACLM,sBAAsB,EAAEJ;IADnB,CAAP;EAGD;;EAED,OAAOK,SAAP;AACD,CArCM;;AAuCP,MAAMC,cAAc,GAAG,SAAyC;EAAA,IAAxC;IAAEV;EAAF,CAAwC;;EAC9D,IAAIA,KAAK,CAACG,IAAV,EAAgB;IACd,OAAOH,KAAK,CAACW,MAAN,CAAaC,OAApB;EACD;;EAED,IAAIZ,KAAK,CAACa,IAAV,EAAgB;IACd,OAAOjB,KAAK,CAACE,KAAD,CAAL,CAAagB,KAAb,CAAmB,IAAnB,EAAyBC,GAAzB,GAA+BC,MAA/B,EAAP;EACD;;EACD,OAAOpB,KAAK,CAACC,KAAD,CAAL,CAAaiB,KAAb,CAAmB,IAAnB,EAAyBC,GAAzB,GAA+BC,MAA/B,EAAP;AACD,CATD;;AAWA,MAAMC,kBAAkB,GAAG,SAMrB;EAAA,IANsB;IAC1BjB,KAD0B;IAE1BkB;EAF0B,CAMtB;;EACJ,IAAIlB,KAAK,CAACG,IAAV,EAAgB;IACd,IAAIe,MAAM,CAAC,WAAD,CAAV,EAAyB;MACvB,OAAOlB,KAAK,CAACW,MAAN,CAAaQ,cAApB;IACD;;IACD,OAAOnB,KAAK,CAACW,MAAN,CAAaS,OAApB;EACD;;EACD,OAAOX,SAAP;AACD,CAdD;;AAgBA,OAAO,MAAMY,aAAa,GAAG,SAMvB;EAAA,IANwB;IAC5BrB,KAD4B;IAE5BsB;EAF4B,CAMxB;;EACJ,MAAMJ,MAAM,GAAIK,aAAD,IAA6B;IAC1C,OAAOD,IAAI,KAAKC,aAAhB;EACD,CAFD;;EAIA,OAAO;IACLC,eAAe,EAAEP,kBAAkB,CAAC;MAClCjB,KADkC;MAElCkB;IAFkC,CAAD,CAD9B;IAKLO,WAAW,EAAEf,cAAc,CAAC;MAAEV;IAAF,CAAD;EALtB,CAAP;AAOD,CAlBM"}