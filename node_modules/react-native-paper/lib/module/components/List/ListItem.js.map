{"version":3,"names":["React","StyleSheet","View","color","withInternalTheme","TouchableRipple","Text","getLeftStyles","getRightStyles","ListItem","left","right","title","description","onPress","theme","style","titleStyle","titleNumberOfLines","descriptionNumberOfLines","titleEllipsizeMode","descriptionEllipsizeMode","descriptionStyle","rest","alignToTop","setAlignToTop","useState","onDescriptionTextLayout","event","isV3","nativeEvent","lines","length","renderDescription","descriptionColor","selectable","ellipsizeMode","fontSize","styles","renderTitle","titleColor","colors","onSurface","text","alpha","rgb","string","onSurfaceVariant","containerV3","container","rowV3","row","itemV3","item","content","displayName","create","padding","paddingVertical","paddingRight","flexDirection","marginVertical","paddingLeft","flex","justifyContent"],"sources":["ListItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  FlexAlignType,\n  NativeSyntheticEvent,\n  StyleProp,\n  StyleSheet,\n  TextLayoutEventData,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type {\n  $RemoveChildren,\n  EllipsizeProp,\n  InternalTheme,\n} from '../../types';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { getLeftStyles, getRightStyles } from './utils';\n\ntype Title =\n  | React.ReactNode\n  | ((props: {\n      selectable: boolean;\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Description =\n  | React.ReactNode\n  | ((props: {\n      selectable: boolean;\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ninterface Style {\n  marginLeft?: number;\n  marginRight?: number;\n  marginVertical?: number;\n  alignSelf?: FlexAlignType;\n}\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Title text for the list item.\n   */\n  title: Title;\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?: Description;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string; style: Style }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { color: string; style?: Style }) => React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Ellipsize Mode for the Title.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  titleEllipsizeMode?: EllipsizeProp;\n  /**\n   * Ellipsize Mode for the Description.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  descriptionEllipsizeMode?: EllipsizeProp;\n};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst ListItem = ({\n  left,\n  right,\n  title,\n  description,\n  onPress,\n  theme,\n  style,\n  titleStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  titleEllipsizeMode,\n  descriptionEllipsizeMode,\n  descriptionStyle,\n  ...rest\n}: Props) => {\n  const [alignToTop, setAlignToTop] = React.useState(false);\n\n  const onDescriptionTextLayout = (\n    event: NativeSyntheticEvent<TextLayoutEventData>\n  ) => {\n    if (!theme.isV3) {\n      return;\n    }\n    const { nativeEvent } = event;\n    setAlignToTop(nativeEvent.lines.length >= 2);\n  };\n\n  const renderDescription = (\n    descriptionColor: string,\n    description?: Description | null\n  ) => {\n    return typeof description === 'function' ? (\n      description({\n        selectable: false,\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize,\n      })\n    ) : (\n      <Text\n        selectable={false}\n        numberOfLines={descriptionNumberOfLines}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n        onTextLayout={onDescriptionTextLayout}\n      >\n        {description}\n      </Text>\n    );\n  };\n\n  const renderTitle = () => {\n    const titleColor = theme.isV3\n      ? theme.colors.onSurface\n      : color(theme.colors.text).alpha(0.87).rgb().string();\n\n    return typeof title === 'function' ? (\n      title({\n        selectable: false,\n        ellipsizeMode: titleEllipsizeMode,\n        color: titleColor,\n        fontSize: styles.title.fontSize,\n      })\n    ) : (\n      <Text\n        selectable={false}\n        ellipsizeMode={titleEllipsizeMode}\n        numberOfLines={titleNumberOfLines}\n        style={[styles.title, { color: titleColor }, titleStyle]}\n      >\n        {title}\n      </Text>\n    );\n  };\n\n  const descriptionColor = theme.isV3\n    ? theme.colors.onSurfaceVariant\n    : color(theme.colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <TouchableRipple\n      {...rest}\n      style={[theme.isV3 ? styles.containerV3 : styles.container, style]}\n      onPress={onPress}\n    >\n      <View style={theme.isV3 ? styles.rowV3 : styles.row}>\n        {left\n          ? left({\n              color: descriptionColor,\n              style: getLeftStyles(alignToTop, description, theme.isV3),\n            })\n          : null}\n        <View\n          style={[theme.isV3 ? styles.itemV3 : styles.item, styles.content]}\n        >\n          {renderTitle()}\n\n          {description\n            ? renderDescription(descriptionColor, description)\n            : null}\n        </View>\n        {right\n          ? right({\n              color: descriptionColor,\n              style: getRightStyles(alignToTop, description, theme.isV3),\n            })\n          : null}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nListItem.displayName = 'List.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  containerV3: {\n    paddingVertical: 8,\n    paddingRight: 24,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  rowV3: {\n    flexDirection: 'row',\n    marginVertical: 6,\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8,\n  },\n  itemV3: {\n    paddingLeft: 16,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withInternalTheme(ListItem);\n"],"mappings":"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"}