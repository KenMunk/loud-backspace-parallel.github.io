/// <reference types="react" />
declare const FAB: (import("react").ComponentType<Pick<import("../../types").$RemoveChildren<({ elevation, children, theme: overridenTheme, style, testID, ...props }: import("../Surface").Props) => JSX.Element> & {
    icon: import("../Icon").IconSource;
    label?: string | undefined;
    uppercase?: boolean | undefined;
    accessibilityLabel?: string | undefined;
    accessibilityState?: import("react-native").AccessibilityState | undefined;
    animated?: boolean | undefined;
    small?: boolean | undefined;
    color?: string | undefined;
    disabled?: boolean | undefined;
    visible?: boolean | undefined;
    loading?: boolean | undefined;
    onPress?: (() => void) | undefined;
    onLongPress?: (() => void) | undefined;
    size?: ("small" | "medium" | "large") | undefined;
    customSize?: number | undefined;
    mode?: ("flat" | "elevated") | undefined;
    variant?: "primary" | "surface" | "secondary" | "tertiary" | undefined;
    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
    theme: import("../../types").InternalTheme;
    testID?: string | undefined;
}, "label" | "small" | "style" | "pointerEvents" | "color" | "size" | "onLayout" | "onPress" | "onLongPress" | "testID" | "nativeID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "visible" | "elevation" | "key" | "hitSlop" | "removeClippedSubviews" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "mode" | "disabled" | "variant" | "uppercase" | "customSize" | "loading" | "animated"> & {
    theme?: import("@callstack/react-theme-provider").$DeepPartial<unknown> | undefined;
}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("../../types").$RemoveChildren<({ elevation, children, theme: overridenTheme, style, testID, ...props }: import("../Surface").Props) => JSX.Element> & {
    icon: import("../Icon").IconSource;
    label?: string | undefined;
    uppercase?: boolean | undefined;
    accessibilityLabel?: string | undefined;
    accessibilityState?: import("react-native").AccessibilityState | undefined;
    animated?: boolean | undefined;
    small?: boolean | undefined;
    color?: string | undefined;
    disabled?: boolean | undefined;
    visible?: boolean | undefined;
    loading?: boolean | undefined;
    onPress?: (() => void) | undefined;
    onLongPress?: (() => void) | undefined;
    size?: ("small" | "medium" | "large") | undefined;
    customSize?: number | undefined;
    mode?: ("flat" | "elevated") | undefined;
    variant?: "primary" | "surface" | "secondary" | "tertiary" | undefined;
    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
    theme: import("../../types").InternalTheme;
    testID?: string | undefined;
}> & (({ icon, label, accessibilityLabel, accessibilityState, animated, color: customColor, disabled, onPress, onLongPress, theme, style, visible, uppercase, loading, testID, size, customSize, mode, variant, ...rest }: import("./FAB").Props) => JSX.Element), {}>) & {
    Group: import("react").ComponentType<Pick<import("./FABGroup").Props, "style" | "color" | "onPress" | "testID" | "accessibilityLabel" | "icon" | "visible" | "variant" | "actions" | "open" | "fabStyle" | "onStateChange" | "backdropColor"> & {
        theme?: import("@callstack/react-theme-provider").$DeepPartial<unknown> | undefined;
    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("./FABGroup").Props> & {
        ({ actions, icon, open, onPress, accessibilityLabel, theme, style, fabStyle, visible, testID, onStateChange, color: colorProp, variant, backdropColor: customBackdropColor, }: import("./FABGroup").Props): JSX.Element;
        displayName: string;
    }, {}>;
};
export default FAB;
