import * as React from 'react';
import { Animated, StyleProp, View, ViewStyle } from 'react-native';
import type { InternalTheme } from '../types';
import Button from './Button/Button';
import Surface from './Surface';
export declare type Props = React.ComponentProps<typeof Surface> & {
    /**
     * Whether the Snackbar is currently visible.
     */
    visible: boolean;
    /**
     * Label and press callback for the action button. It should contain the following properties:
     * - `label` - Label of the action button
     * - `onPress` - Callback that is called when action button is pressed.
     */
    action?: Omit<React.ComponentProps<typeof Button>, 'children'> & {
        label: string;
    };
    /**
     * The duration for which the Snackbar is shown.
     */
    duration?: number;
    /**
     * Callback called when Snackbar is dismissed. The `visible` prop needs to be updated when this is called.
     */
    onDismiss: () => void;
    /**
     * Text content of the Snackbar.
     */
    children: React.ReactNode;
    /**
     * Style for the wrapper of the snackbar
     */
    /**
     * @supported Available in v5.x with theme version 3
     * Changes Snackbar shadow and background on iOS and Android.
     */
    elevation?: 0 | 1 | 2 | 3 | 4 | 5 | Animated.Value;
    wrapperStyle?: StyleProp<ViewStyle>;
    style?: StyleProp<ViewStyle>;
    ref?: React.RefObject<View>;
    /**
     * @optional
     */
    theme: InternalTheme;
};
declare const _default: React.ComponentType<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
    children: React.ReactNode;
    style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
    elevation?: 0 | 3 | 2 | 1 | 4 | 5 | Animated.Value | undefined;
    theme?: InternalTheme | undefined;
    testID?: string | undefined;
} & {
    /**
     * Whether the Snackbar is currently visible.
     */
    visible: boolean;
    /**
     * Label and press callback for the action button. It should contain the following properties:
     * - `label` - Label of the action button
     * - `onPress` - Callback that is called when action button is pressed.
     */
    action?: (Omit<(Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
        children: React.ReactNode;
        style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
        elevation?: 0 | 3 | 2 | 1 | 4 | 5 | Animated.Value | undefined;
        theme?: InternalTheme | undefined;
        testID?: string | undefined;
    } & {
        mode?: "text" | "outlined" | "contained" | "elevated" | "contained-tonal" | undefined;
        dark?: boolean | undefined;
        compact?: boolean | undefined;
        color?: string | undefined;
        buttonColor?: string | undefined;
        textColor?: string | undefined;
        loading?: boolean | undefined;
        icon?: import("./Icon").IconSource | undefined;
        disabled?: boolean | undefined;
        children: React.ReactNode;
        uppercase?: boolean | undefined;
        accessibilityLabel?: string | undefined;
        accessibilityHint?: string | undefined;
        onPress?: (() => void) | undefined;
        onPressIn?: (() => void) | undefined;
        onPressOut?: (() => void) | undefined;
        onLongPress?: (() => void) | undefined;
        contentStyle?: StyleProp<ViewStyle>;
        style?: StyleProp<ViewStyle>;
        labelStyle?: StyleProp<import("react-native").TextStyle>;
        theme: InternalTheme;
        testID?: string | undefined;
    }, "dark" | "color" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "icon" | "elevation" | keyof import("react-native").ViewProps | "mode" | "disabled" | keyof React.RefAttributes<View> | "uppercase" | "labelStyle" | "compact" | "loading" | "buttonColor" | "textColor" | "contentStyle"> & {
        theme?: import("@callstack/react-theme-provider").$DeepPartial<unknown> | undefined;
    }) | (Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
        children: React.ReactNode;
        style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
        elevation?: 0 | 3 | 2 | 1 | 4 | 5 | Animated.Value | undefined;
        theme?: InternalTheme | undefined;
        testID?: string | undefined;
    } & {
        mode?: "text" | "outlined" | "contained" | "elevated" | "contained-tonal" | undefined;
        dark?: boolean | undefined;
        compact?: boolean | undefined;
        color?: string | undefined;
        buttonColor?: string | undefined;
        textColor?: string | undefined;
        loading?: boolean | undefined;
        icon?: import("./Icon").IconSource | undefined;
        disabled?: boolean | undefined;
        children: React.ReactNode;
        uppercase?: boolean | undefined;
        accessibilityLabel?: string | undefined;
        accessibilityHint?: string | undefined;
        onPress?: (() => void) | undefined;
        onPressIn?: (() => void) | undefined;
        onPressOut?: (() => void) | undefined;
        onLongPress?: (() => void) | undefined;
        contentStyle?: StyleProp<ViewStyle>;
        style?: StyleProp<ViewStyle>;
        labelStyle?: StyleProp<import("react-native").TextStyle>;
        theme: InternalTheme;
        testID?: string | undefined;
    }, "dark" | "color" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "icon" | "elevation" | keyof import("react-native").ViewProps | "mode" | "disabled" | keyof React.RefAttributes<View> | "uppercase" | "labelStyle" | "compact" | "loading" | "buttonColor" | "textColor" | "contentStyle"> & {
        theme?: import("@callstack/react-theme-provider").$DeepPartial<unknown> | undefined;
    } & {
        children?: React.ReactNode;
    }), "children"> & {
        label: string;
    }) | undefined;
    /**
     * The duration for which the Snackbar is shown.
     */
    duration?: number | undefined;
    /**
     * Callback called when Snackbar is dismissed. The `visible` prop needs to be updated when this is called.
     */
    onDismiss: () => void;
    /**
     * Text content of the Snackbar.
     */
    children: React.ReactNode;
    /**
     * Style for the wrapper of the snackbar
     */
    /**
     * @supported Available in v5.x with theme version 3
     * Changes Snackbar shadow and background on iOS and Android.
     */
    elevation?: 0 | 3 | 2 | 1 | 4 | 5 | Animated.Value | undefined;
    wrapperStyle?: StyleProp<ViewStyle>;
    style?: StyleProp<ViewStyle>;
    ref?: React.RefObject<View> | undefined;
    /**
     * @optional
     */
    theme: InternalTheme;
}, "visible" | "elevation" | keyof import("react-native").ViewProps | keyof React.RefAttributes<View> | "onDismiss" | "action" | "duration" | "wrapperStyle"> & {
    theme?: import("@callstack/react-theme-provider").$DeepPartial<unknown> | undefined;
}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").ViewProps & React.RefAttributes<View> & {
    children: React.ReactNode;
    style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
    elevation?: 0 | 3 | 2 | 1 | 4 | 5 | Animated.Value | undefined;
    theme?: InternalTheme | undefined;
    testID?: string | undefined;
} & {
    /**
     * Whether the Snackbar is currently visible.
     */
    visible: boolean;
    /**
     * Label and press callback for the action button. It should contain the following properties:
     * - `label` - Label of the action button
     * - `onPress` - Callback that is called when action button is pressed.
     */
    action?: (Omit<(Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
        children: React.ReactNode;
        style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
        elevation?: 0 | 3 | 2 | 1 | 4 | 5 | Animated.Value | undefined;
        theme?: InternalTheme | undefined;
        testID?: string | undefined;
    } & {
        mode?: "text" | "outlined" | "contained" | "elevated" | "contained-tonal" | undefined;
        dark?: boolean | undefined;
        compact?: boolean | undefined;
        color?: string | undefined;
        buttonColor?: string | undefined;
        textColor?: string | undefined;
        loading?: boolean | undefined;
        icon?: import("./Icon").IconSource | undefined;
        disabled?: boolean | undefined;
        children: React.ReactNode;
        uppercase?: boolean | undefined;
        accessibilityLabel?: string | undefined;
        accessibilityHint?: string | undefined;
        onPress?: (() => void) | undefined;
        onPressIn?: (() => void) | undefined;
        onPressOut?: (() => void) | undefined;
        onLongPress?: (() => void) | undefined;
        contentStyle?: StyleProp<ViewStyle>;
        style?: StyleProp<ViewStyle>;
        labelStyle?: StyleProp<import("react-native").TextStyle>;
        theme: InternalTheme;
        testID?: string | undefined;
    }, "dark" | "color" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "icon" | "elevation" | keyof import("react-native").ViewProps | "mode" | "disabled" | keyof React.RefAttributes<View> | "uppercase" | "labelStyle" | "compact" | "loading" | "buttonColor" | "textColor" | "contentStyle"> & {
        theme?: import("@callstack/react-theme-provider").$DeepPartial<unknown> | undefined;
    }) | (Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
        children: React.ReactNode;
        style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
        elevation?: 0 | 3 | 2 | 1 | 4 | 5 | Animated.Value | undefined;
        theme?: InternalTheme | undefined;
        testID?: string | undefined;
    } & {
        mode?: "text" | "outlined" | "contained" | "elevated" | "contained-tonal" | undefined;
        dark?: boolean | undefined;
        compact?: boolean | undefined;
        color?: string | undefined;
        buttonColor?: string | undefined;
        textColor?: string | undefined;
        loading?: boolean | undefined;
        icon?: import("./Icon").IconSource | undefined;
        disabled?: boolean | undefined;
        children: React.ReactNode;
        uppercase?: boolean | undefined;
        accessibilityLabel?: string | undefined;
        accessibilityHint?: string | undefined;
        onPress?: (() => void) | undefined;
        onPressIn?: (() => void) | undefined;
        onPressOut?: (() => void) | undefined;
        onLongPress?: (() => void) | undefined;
        contentStyle?: StyleProp<ViewStyle>;
        style?: StyleProp<ViewStyle>;
        labelStyle?: StyleProp<import("react-native").TextStyle>;
        theme: InternalTheme;
        testID?: string | undefined;
    }, "dark" | "color" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "icon" | "elevation" | keyof import("react-native").ViewProps | "mode" | "disabled" | keyof React.RefAttributes<View> | "uppercase" | "labelStyle" | "compact" | "loading" | "buttonColor" | "textColor" | "contentStyle"> & {
        theme?: import("@callstack/react-theme-provider").$DeepPartial<unknown> | undefined;
    } & {
        children?: React.ReactNode;
    }), "children"> & {
        label: string;
    }) | undefined;
    /**
     * The duration for which the Snackbar is shown.
     */
    duration?: number | undefined;
    /**
     * Callback called when Snackbar is dismissed. The `visible` prop needs to be updated when this is called.
     */
    onDismiss: () => void;
    /**
     * Text content of the Snackbar.
     */
    children: React.ReactNode;
    /**
     * Style for the wrapper of the snackbar
     */
    /**
     * @supported Available in v5.x with theme version 3
     * Changes Snackbar shadow and background on iOS and Android.
     */
    elevation?: 0 | 3 | 2 | 1 | 4 | 5 | Animated.Value | undefined;
    wrapperStyle?: StyleProp<ViewStyle>;
    style?: StyleProp<ViewStyle>;
    ref?: React.RefObject<View> | undefined;
    /**
     * @optional
     */
    theme: InternalTheme;
}> & {
    ({ visible, action, duration, onDismiss, children, elevation, wrapperStyle, style, theme, ...rest }: Props): JSX.Element | null;
    /**
     * Show the Snackbar for a short duration.
     */
    DURATION_SHORT: number;
    /**
     * Show the Snackbar for a medium duration.
     */
    DURATION_MEDIUM: number;
    /**
     * Show the Snackbar for a long duration.
     */
    DURATION_LONG: number;
}, {}>;
export default _default;
